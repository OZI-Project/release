name: ozi-release
description: "OZI release draft action."
inputs:
  python-dist:
    description: "python dist version string e.g. security22, security21, bugfix, prerelease"
    required: true
  github-token:
    description: "GitHub workflow-generated token"
    required: true
  tag:
    description: "release tag name"
    required: true
outputs:
  hashes:
    description: "release file hashes for provenance"
    value: ${{ steps.hash.outputs.hashes }}
runs:
  using: "composite"
  steps:

  - name: Get OZI specification API
    id: ozi-support
    run: |
      echo "python-version=$( curl -L https://oziproject.dev/api.json | jq -c '.spec.python.support.${{ inputs.python-dist }}' )" >> $GITHUB_OUTPUT
    shell: bash

  - uses: actions/download-artifact@v4
    with:
      name: ${{ inputs.python-dist }}

  - name: Set up Python ${{ steps.ozi-support.outputs.python-version }}
    if: inputs.python-dist != 'prerelease'
    uses: actions/setup-python@v5
    with:
      cache: 'pip'
      python-version: ${{ fromJSON(steps.ozi-support.outputs.python-version) }}

  - name: Set up Python ${{ steps.ozi-support.outputs.python-version }}
    id: maybe-prerelease
    if: inputs.python-dist == 'prerelease'
    uses: actions/setup-python@v5
    with:
      cache: 'pip'
      python-version: ${{ fromJSON(steps.ozi-support.outputs.python-version) }}
      allow-prereleases: true
      check-latest: true

  - name: Install build dependencies
    run: |
        python -m pip install --upgrade pip
        python -m pip install --user --upgrade build
        python -m pip install --user --upgrade meson
        python -m pip install --user --upgrade OZI.build
        python -m pip install --user --upgrade setuptools_scm
        python -m pip install --user --upgrade ninja
        python -m pip install --user --upgrade pip-tools
    shell: bash

  - name: Configure git repository
    if: inputs.python-dist == 'security2'
    run: |
        git config --global user.email "noreply@oziproject.dev"
        git config --global user.name "OZI Packaging"
        rm -rf .git/COMMIT_EDITMSG
    shell: bash

  - name: Hiding README.rst symlink from SCM
    continue-on-error: true
    run: |
        git update-index --skip-worktree README.rst
    shell: bash

  - name: Hiding README.md symlink from SCM
    continue-on-error: true
    run: |
        git update-index --skip-worktree README.md
    shell: bash

  - name: Hiding README.txt symlink from SCM
    continue-on-error: true
    run: |
        git update-index --skip-worktree README.txt
    shell: bash

  - name: Build wheel
    if: contains(fromJSON('["bugfix", "security1", "security2"]'), inputs.python-dist)
    id: wheel
    run: |
      python -m build -w
    shell: bash

  - name: Build prerelease wheel
    if: inputs.python-dist == 'prerelease'
    continue-on-error: true
    id: wheel-prerelease
    run: |
      python -m build -w
    shell: bash

  - name: Build wheel and sdist
    if: inputs.python-dist == 'bugfix'
    id: sdist
    run: |
      python -m build
    shell: bash

  - uses: sigstore/gh-action-sigstore-python@v2.1.1
    if: inputs.python-dist == 'bugfix'
    with:
      inputs: dist/${{ github.event.repository.name }}-${{ inputs.tag }}.tar.gz
      release-signing-artifacts: true
      upload-signing-artifacts: true

  - uses: sigstore/gh-action-sigstore-python@v2.1.1
    if: inputs.python-dist == 'bugfix'
    with:
      inputs: dist/${{ github.event.repository.name }}-${{ inputs.tag }}-*.whl
      upload-signing-artifacts: true

  - name: Move wheel signing files
    if: inputs.python-dist == 'prerelease'
    run: |
      mkdir sig
      mv dist/*.whl.sigstore sig
      rm -rf dist/*.dist-info
    shell: bash

  - name: Move sdist signing file
    if: inputs.python-dist == 'prerelease'
    run: |
      mv dist/${{ github.event.repository.name }}-${{ inputs.tag }}.tar.gz.sigstore sig/${{ github.event.repository.name }}-${{ inputs.tag }}.tar.gz.sigstore
    shell: bash

  - name: Generate hashes for provenance
    shell: bash
    id: hash
    if: inputs.python-dist == 'prerelease'
    run: |
      # sha256sum generates sha256 hash for all artifacts.
      # base64 -w0 encodes to base64 and outputs on a single line.
      # sha256sum artifact1 artifact2 ... | base64 -w0
      echo "hashes=$(sha256sum ./dist/* | base64 -w0)" >> $GITHUB_OUTPUT

  - uses: actions/upload-artifact@v4.3.0
    if: inputs.python-dist == 'security2'
    with:
      name: 'security1'
      path: |
        !*-checkpoint/
        !signing-artifacts-*/
        !security2/
        !build/
        ./

  - uses: actions/upload-artifact@v4.3.0
    if: inputs.python-dist == 'security1'
    with:
      name: 'bugfix'
      path: |
        !security1/
        !build/
        ./

  - uses: actions/upload-artifact@v4.3.0
    if: inputs.python-dist == 'bugfix'
    with:
      name: 'prerelease'
      path: |
        !bugfix/
        !build/
        ./

  - uses: actions/upload-artifact@v4.3.0
    if: inputs.python-dist == 'prerelease'
    with:
      path: |
        !prerelease/
        !build/
        ./
